#include "node_style.hpp"

<% for (const layer of locals.layers) { -%>
#include <mbgl/style/layers/<%- layer.type %>_layer.hpp>
<% } -%>

namespace node_mbgl {

inline PropertySetters makeLayoutPropertySetters() {
    using namespace mbgl::style;
    PropertySetters result;

    result["visibility"] = &setVisibility;

<% for (const layer of locals.layers) { -%>
<% for (const property of layer.layoutProperties) { -%>
    result["<%- property.name %>"] = makePropertySetter(&<%- camelize(layer.type) %>Layer::set<%- camelize(property.name) %>);
<% } -%>

<% } -%>
    return result;
}

inline PropertySetters makePaintPropertySetters() {
    using namespace mbgl::style;
    PropertySetters result;

<% for (const layer of locals.layers) { -%>
<% for (const property of layer.paintProperties) { -%>
    result["<%- property.name %>"] = makePropertySetter(&<%- camelize(layer.type) %>Layer::set<%- camelize(property.name) %>);
<% } -%>

<% } -%>
    return result;
}

inline bool setFilter(mbgl::style::Layer& layer, const mbgl::style::Filter& filter) {
    using namespace mbgl::style;

<% for (const layer of locals.layers) { -%>
<% if (layer.type !== 'raster' && layer.type !== 'background' && layer.type !== 'custom') { -%>
    if (layer.is<<%- camelize(layer.type) %>Layer>()) {
        layer.as<<%- camelize(layer.type) %>Layer>()->setFilter(filter);
        return true;
    }
<% } -%>
<% } -%>

    Nan::ThrowTypeError("layer doesn't support filters");
    return false;
}

}
